openapi: 3.1.0
info:
  title: Intent Platform API
  version: 0.1.0
  description: |
    Initial hello world surface for the Intent platform. The service exposes a
    greeting endpoint that proves connectivity to Postgres and demonstrates the
    future shape of the platform APIs.
servers:
  - url: http://localhost:8080
paths:
  /api/hello:
    get:
      summary: Retrieve a hello world greeting from Postgres
      operationId: getHelloGreeting
      responses:
        '200':
          description: Successful greeting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/intents:
    get:
      summary: List intents with filtering and pagination
      operationId: listIntents
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number starting from 1.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items to return per page.
        - in: query
          name: q
          schema:
            type: string
          description: Case-insensitive search across statement, context, and expected outcome fields.
        - in: query
          name: collaborator
          schema:
            type: string
          description: Filter intents by collaborator name (case-insensitive).
        - in: query
          name: createdAfter
          schema:
            type: string
            format: date-time
          description: Return intents created on or after this timestamp (RFC3339).
        - in: query
          name: createdBefore
          schema:
            type: string
            format: date-time
          description: Return intents created on or before this timestamp (RFC3339).
      responses:
        '200':
          description: Intents matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntentListResponse'
        '400':
          description: Invalid filter or pagination parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Submit a new intent for Chapter review
      operationId: createIntent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntentRequest'
      responses:
        '201':
          description: Intent created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntentResponse'
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/intents/{id}:
    get:
      summary: Retrieve a single intent
      operationId: getIntent
      parameters:
        - $ref: '#/components/parameters/IntentId'
      responses:
        '200':
          description: Intent found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntentResponse'
        '400':
          description: Invalid identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Intent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Replace an intent
      operationId: updateIntent
      parameters:
        - $ref: '#/components/parameters/IntentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntentRequest'
      responses:
        '200':
          description: Intent updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntentResponse'
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Intent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete an intent
      operationId: deleteIntent
      parameters:
        - $ref: '#/components/parameters/IntentId'
      responses:
        '204':
          description: Intent deleted
        '400':
          description: Invalid identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Intent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/goals:
    get:
      summary: List goals with filtering and pagination
      operationId: listGoals
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number starting from 1.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items to return per page.
        - in: query
          name: q
          schema:
            type: string
          description: Case-insensitive search across title, clarity statement, and success criteria fields.
        - in: query
          name: createdAfter
          schema:
            type: string
            format: date-time
          description: Return goals created on or after this timestamp (RFC3339).
        - in: query
          name: createdBefore
          schema:
            type: string
            format: date-time
          description: Return goals created on or before this timestamp (RFC3339).
      responses:
        '200':
          description: Goals matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalListResponse'
        '400':
          description: Invalid filter or pagination parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a goal with clarity, constraints, and success criteria
      operationId: createGoal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGoalRequest'
      responses:
        '201':
          description: Goal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/goals/{id}:
    get:
      summary: Retrieve a single goal
      operationId: getGoal
      parameters:
        - $ref: '#/components/parameters/GoalId'
      responses:
        '200':
          description: Goal found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        '400':
          description: Invalid identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Goal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Replace a goal
      operationId: updateGoal
      parameters:
        - $ref: '#/components/parameters/GoalId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGoalRequest'
      responses:
        '200':
          description: Goal updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Goal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a goal
      operationId: deleteGoal
      parameters:
        - $ref: '#/components/parameters/GoalId'
      responses:
        '204':
          description: Goal deleted
        '400':
          description: Invalid identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Goal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /healthz:
    get:
      summary: Health check endpoint
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            text/plain:
              schema:
                type: string
components:
  parameters:
    IntentId:
      in: path
      name: id
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier for the intent.
    GoalId:
      in: path
      name: id
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier for the goal.
  schemas:
    HelloResponse:
      type: object
      properties:
        message:
          type: string
          example: Hello, Intent!
      required:
        - message
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
      required:
        - error
    CreateIntentRequest:
      type: object
      properties:
        statement:
          type: string
          description: The "I intend to" statement in the engineer's own words.
          example: I intend to improve deployment visibility for the Thursday release.
        context:
          type: string
          description: Relevant background that explains why the intent matters now.
          example: Our incident review highlighted missing deployment dashboards.
        expectedOutcome:
          type: string
          description: What success looks like when the intent is fulfilled.
          example: A published runbook and Grafana view shared with the chapter.
        collaborators:
          type: array
          description: Engineers or roles needed to fulfil the intent.
          items:
            type: string
          example:
            - SRE Guild
            - Frontend pairing partner
      required:
        - statement
        - context
        - expectedOutcome
    IntentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the newly created intent.
        statement:
          type: string
        context:
          type: string
        expectedOutcome:
          type: string
        collaborators:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
          description: Timestamp indicating when the intent was recorded.
      required:
        - id
        - statement
        - context
        - expectedOutcome
        - collaborators
        - createdAt
    PaginationMetadata:
      type: object
      properties:
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
        totalItems:
          type: integer
          example: 42
        totalPages:
          type: integer
          example: 3
      required:
        - page
        - pageSize
        - totalItems
        - totalPages
    IntentListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/IntentResponse'
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - items
        - pagination
    CreateGoalRequest:
      type: object
      properties:
        title:
          type: string
          description: Concise name that expresses the outcome the chapter is aiming for.
          example: Accelerate Thursday release readiness
        clarityStatement:
          type: string
          description: The narrative that explains why the goal matters now.
          example: We keep scrambling Thursday morning because test evidence is fragmented.
        constraints:
          type: array
          description: Guardrails or boundaries that must not be violated.
          items:
            type: string
          example:
            - Protect member focus time
            - Do not increase deploy risk
        successCriteria:
          type: array
          description: Observable signals that prove the goal was achieved.
          items:
            type: string
          example:
            - All squads publish readiness checklist by Wednesday
            - Fewer than two manual rollback steps
      required:
        - title
        - clarityStatement
    GoalResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        clarityStatement:
          type: string
        constraints:
          type: array
          items:
            type: string
        successCriteria:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - clarityStatement
        - constraints
        - successCriteria
        - createdAt
        - updatedAt
    GoalListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/GoalResponse'
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - items
        - pagination
